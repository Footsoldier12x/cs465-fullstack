{"ast":null,"code":"import { BROWSER_STORAGE } from '../storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/trip-data.service\";\nexport class AuthenticationService {\n  constructor(storage, tripDataService) {\n    this.storage = storage;\n    this.tripDataService = tripDataService;\n  }\n  getToken() {\n    return String(this.storage.getItem('travlr-token'));\n  }\n  saveToken(token) {\n    this.storage.setItem('travlr-token', token);\n  }\n  login(user) {\n    return this.tripDataService.login(user).then(authResp => this.saveToken(authResp.token));\n  }\n  register(user) {\n    return this.tripDataService.register(user).then(authResp => this.saveToken(authResp.token));\n  }\n  logout() {\n    this.storage.removeItem('travlr-token');\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    if (token != 'null') {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      //console.log(payload);\n      return payload.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n  getCurrentUser() {\n    if (this.isLoggedIn()) {\n      const token = this.getToken();\n      const {\n        email,\n        name\n      } = JSON.parse(atob(token.split('.')[1]));\n      return {\n        email,\n        name\n      };\n    } else {\n      const email = '';\n      const name = '';\n      return {\n        email,\n        name\n      };\n    }\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(BROWSER_STORAGE), i0.ɵɵinject(i1.TripDataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BROWSER_STORAGE","AuthenticationService","constructor","storage","tripDataService","getToken","String","getItem","saveToken","token","setItem","login","user","then","authResp","register","logout","removeItem","isLoggedIn","payload","JSON","parse","atob","split","exp","Date","now","getCurrentUser","email","name","_","i0","ɵɵinject","i1","TripDataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jpi\\source\\repos\\CS-465 Travlr project\\travlr\\app_admin\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { BROWSER_STORAGE } from '../storage';\r\nimport { User } from '../models/user';\r\nimport { AuthResponse } from '../models/authresponse';\r\nimport { TripDataService } from '../services/trip-data.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthenticationService {\r\n  constructor(\r\n    @Inject(BROWSER_STORAGE) private storage: Storage,\r\n    private tripDataService: TripDataService\r\n  ) {}\r\n\r\n  public getToken(): string {\r\n    return String(this.storage.getItem('travlr-token'));\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    this.storage.setItem('travlr-token', token);\r\n  }\r\n\r\n  public login(user: User): Promise<any> {\r\n    return this.tripDataService\r\n      .login(user)\r\n      .then((authResp: AuthResponse) => this.saveToken(authResp.token));\r\n  }\r\n\r\n  public register(user: User): Promise<any> {\r\n    return this.tripDataService\r\n      .register(user)\r\n      .then((authResp: AuthResponse) => this.saveToken(authResp.token));\r\n  }\r\n\r\n  public logout(): void {\r\n    this.storage.removeItem('travlr-token');\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const token: string = this.getToken();\r\n    if (token != 'null') {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n\r\n      //console.log(payload);\r\n      return payload.exp > Date.now() / 1000;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public getCurrentUser(): User {\r\n    if (this.isLoggedIn()) {\r\n      const token: string = this.getToken();\r\n\r\n      const { email, name } = JSON.parse(atob(token.split('.')[1]));\r\n      return { email, name } as User;\r\n    } else {\r\n      const email: string = '';\r\n      const name: string = '';\r\n      return { email, name } as User;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,YAAY;;;AAQ5C,OAAM,MAAOC,qBAAqB;EAChCC,YACmCC,OAAgB,EACzCC,eAAgC;IADP,KAAAD,OAAO,GAAPA,OAAO;IAChC,KAAAC,eAAe,GAAfA,eAAe;EACtB;EAEIC,QAAQA,CAAA;IACb,OAAOC,MAAM,CAAC,IAAI,CAACH,OAAO,CAACI,OAAO,CAAC,cAAc,CAAC,CAAC;EACrD;EAEOC,SAASA,CAACC,KAAa;IAC5B,IAAI,CAACN,OAAO,CAACO,OAAO,CAAC,cAAc,EAAED,KAAK,CAAC;EAC7C;EAEOE,KAAKA,CAACC,IAAU;IACrB,OAAO,IAAI,CAACR,eAAe,CACxBO,KAAK,CAACC,IAAI,CAAC,CACXC,IAAI,CAAEC,QAAsB,IAAK,IAAI,CAACN,SAAS,CAACM,QAAQ,CAACL,KAAK,CAAC,CAAC;EACrE;EAEOM,QAAQA,CAACH,IAAU;IACxB,OAAO,IAAI,CAACR,eAAe,CACxBW,QAAQ,CAACH,IAAI,CAAC,CACdC,IAAI,CAAEC,QAAsB,IAAK,IAAI,CAACN,SAAS,CAACM,QAAQ,CAACL,KAAK,CAAC,CAAC;EACrE;EAEOO,MAAMA,CAAA;IACX,IAAI,CAACb,OAAO,CAACc,UAAU,CAAC,cAAc,CAAC;EACzC;EAEOC,UAAUA,CAAA;IACf,MAAMT,KAAK,GAAW,IAAI,CAACJ,QAAQ,EAAE;IACrC,IAAII,KAAK,IAAI,MAAM,EAAE;MACnB,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAErD;MACA,OAAOJ,OAAO,CAACK,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI;KACvC,MAAM;MACL,OAAO,KAAK;;EAEhB;EAEOC,cAAcA,CAAA;IACnB,IAAI,IAAI,CAACT,UAAU,EAAE,EAAE;MACrB,MAAMT,KAAK,GAAW,IAAI,CAACJ,QAAQ,EAAE;MAErC,MAAM;QAAEuB,KAAK;QAAEC;MAAI,CAAE,GAAGT,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7D,OAAO;QAAEK,KAAK;QAAEC;MAAI,CAAU;KAC/B,MAAM;MACL,MAAMD,KAAK,GAAW,EAAE;MACxB,MAAMC,IAAI,GAAW,EAAE;MACvB,OAAO;QAAED,KAAK;QAAEC;MAAI,CAAU;;EAElC;EAAC,QAAAC,CAAA,G;qBArDU7B,qBAAqB,EAAA8B,EAAA,CAAAC,QAAA,CAEtBhC,eAAe,GAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAFdlC,qBAAqB;IAAAmC,OAAA,EAArBnC,qBAAqB,CAAAoC,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}